#!/usr/bin/env python3
import socket
import threading
import select
import signal
import sys
import time
import argparse

# Default Config
LISTENING_ADDR = "0.0.0.0"
LISTENING_PORT = 8080
PASS = ""
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = "127.0.0.1:109"
RESPONSE = (
    "HTTP/1.1 101 Switching Protocols\r\n"
    "Content-Length: 104857600000\r\n\r\n"
)


class Server(threading.Thread):
    def __init__(self, host, port):
        super().__init__()
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()
        self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, int(self.port)))
        self.soc.listen(128)
        self.running = True

        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(True)
                except socket.timeout:
                    continue
                conn = ConnectionHandler(c, self, addr)
                conn.start()
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()

    def printLog(self, log):
        with self.logLock:
            print(log, flush=True)

    def addConn(self, conn):
        with self.threadsLock:
            if self.running:
                self.threads.append(conn)

    def removeConn(self, conn):
        with self.threadsLock:
            if conn in self.threads:
                self.threads.remove(conn)

    def close(self):
        self.running = False
        with self.threadsLock:
            for c in list(self.threads):
                c.close()


class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        super().__init__()
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = b""
        self.server = server
        self.log = f"Connection: {addr}"

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except Exception:
            pass
        finally:
            self.clientClosed = True

        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except Exception:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)
            if not self.client_buffer:
                return

            hostPort = self.findHeader(self.client_buffer, "X-Real-Host")
            if not hostPort:
                hostPort = DEFAULT_HOST

            split = self.findHeader(self.client_buffer, "X-Split")
            if split:
                self.client.recv(BUFLEN)

            if hostPort:
                passwd = self.findHeader(self.client_buffer, "X-Pass")
                if PASS and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif PASS and passwd != PASS:
                    self.client.send(b"HTTP/1.1 400 WrongPass!\r\n\r\n")
                elif hostPort.startswith(("127.0.0.1", "localhost")):
                    self.method_CONNECT(hostPort)
                else:
                    self.client.send(b"HTTP/1.1 403 Forbidden!\r\n\r\n")
            else:
                self.server.printLog("- No X-Real-Host!")
                self.client.send(b"HTTP/1.1 400 NoXRealHost!\r\n\r\n")
        except Exception as e:
            self.log += f" - error: {e}"
            self.server.printLog(self.log)
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        try:
            head_str = head.decode(errors="ignore")
            marker = f"{header}: "
            idx = head_str.find(marker)
            if idx == -1:
                return ""
            value = head_str[idx + len(marker):].split("\r\n", 1)[0]
            return value.strip()
        except Exception:
            return ""

    def connect_target(self, host):
        if ":" in host:
            h, p = host.split(":", 1)
            port = int(p)
            host = h
        else:
            port = 443 if self.method == "CONNECT" else LISTENING_PORT
        (family, socktype, proto, _, addr) = socket.getaddrinfo(host, port)[0]
        self.target = socket.socket(family, socktype, proto)
        self.targetClosed = False
        self.target.connect(addr)

    def method_CONNECT(self, path):
        self.log += f" - CONNECT {path}"
        self.connect_target(path)
        self.client.sendall(RESPONSE.encode())
        self.client_buffer = b""
        self.server.printLog(self.log)
        self.doCONNECT()

    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        while True:
            count += 1
            rlist, _, err = select.select(socs, [], socs, 3)
            if err:
                break
            if rlist:
                for in_ in rlist:
                    try:
                        data = in_.recv(BUFLEN)
                        if not data:
                            return
                        if in_ is self.target:
                            self.client.sendall(data)
                        else:
                            self.target.sendall(data)
                        count = 0
                    except Exception:
                        return
            if count >= TIMEOUT:
                break


def main():
    parser = argparse.ArgumentParser(description="Simple Python WebSocket Proxy")
    parser.add_argument("-b", "--bind", default=LISTENING_ADDR, help="Listening address (default 0.0.0.0)")
    parser.add_argument("-p", "--port", type=int, default=LISTENING_PORT, help="Listening port (default 8080)")
    args = parser.parse_args()

    print("\n:------- PythonProxy -------:")
    print(f"Listening addr: {args.bind}")
    print(f"Listening port: {args.port}")
    print(":---------------------------:\n")

    server = Server(args.bind, args.port)
    server.start()

    try:
        while True:
            time.sleep(2)
    except KeyboardInterrupt:
        print("Stopping...")
        server.close()


if __name__ == "__main__":
    main()
